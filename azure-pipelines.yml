trigger:
  branches:
    include:
      - master
  paths:
    include:
      - "webapp/*"

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: "uda-rg-prj2-cnn"

  # Web app name
  webAppName: "flask-ml-uda-proj2"

  # Build agent pool name
  buildPoolName: "Default"

  # Deployment agent pool name
  deployPoolName: "Default"

  # Environment name
  environmentName: "flask-ml-uda-proj2"

  # Project root folder. Point to the folder containing the project files.
  projectRoot: $(System.DefaultWorkingDirectory)

  # Python version: 3.8.10
  pythonVersion: "3.8.10"

  # Workspace directory
  workspaceDir: "webapp/flask-sklearn"

stages:
  # - stage: Build
  #   displayName: Build stage
  #   jobs:
  #     - job: BuildJob
  #       pool:
  #         name: "$(buildPoolName)"
  #         vmImage: 'ubuntu-2004'
  #       steps:
  #         - task: UsePythonVersion@0
  #           inputs:
  #             versionSpec: "$(pythonVersion)"
  #           displayName: "Use Python $(pythonVersion)"

  #         - script: |
  #             pwd
  #             ls -la
  #           workingDirectory: $(projectRoot)/$(workspaceDir)
  #           displayName: "Verify build environment"

  #         - script: |
  #             python -m venv antenv
  #             source antenv/bin/activate
  #             python -m pip install --upgrade pip
  #             pip install setup
  #             pip install -r requirements.txt
  #             deactivate
  #           workingDirectory: $(projectRoot)/$(workspaceDir)
  #           displayName: "Install requirements"

  #         - task: ArchiveFiles@2
  #           displayName: "Archive files"
  #           inputs:
  #             rootFolderOrFile: "$(projectRoot)/$(workspaceDir)"
  #             includeRootFolder: false
  #             archiveType: zip
  #             archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
  #             replaceExistingArchive: true

  #         - task: PublishPipelineArtifact@1
  #           displayName: "Upload package"
  #           inputs: 
  #             targetPath: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
  #             artifact: drop

  - stage: Deploy
    displayName: "Deploy Web App"
    # dependsOn: Build
    # condition: succeeded()
    jobs:
      - deployment: DeploymentJob
        pool:
          name: "$(deployPoolName)"
        environment: $(environmentName)
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop

                - script: |
                    echo "##[section]Downloading artifact"
                    ls -la $(Pipeline.Workspace)/drop
                  displayName: "Check artifact content"

                - task: AzureWebApp@1
                  displayName: "Deploy Azure Web App"
                  inputs:
                    azureSubscription: $(azureServiceConnectionId)
                    appName: $(webAppName)
                    #package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
                    package: $(Pipeline.Workspace)/drop/44.zip
                    deploymentMethod: auto
